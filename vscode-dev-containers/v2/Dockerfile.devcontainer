FROM mcr.microsoft.com/devcontainers/python:1-3.12-bullseye

RUN apt-get update && apt-get install -y apt-transport-https ca-certificates gnupg curl yamllint
RUN curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | gpg --dearmor -o /usr/share/keyrings/cloud.google.gpg
RUN echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | \
  tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
RUN apt-get update && apt-get install -y google-cloud-cli iputils-ping
RUN apt-get install -y google-cloud-cli-gke-gcloud-auth-plugin kubectl
RUN apt-get install silversearcher-ag
RUN echo 'deb [trusted=yes] http://ftp.de.debian.org/debian buster main' | tee -a vi /etc/apt/sources.list
RUN apt-get update && apt-get install -y wget ruby ruby-dev rubygems

# The version of kubectx via apt is maybe old, and it does not support the -c argument -- this version does
RUN curl -sSL https://github.com/ahmetb/kubectx/releases/download/v0.9.4/kubectx_v0.9.4_linux_x86_64.tar.gz -o /tmp/kubectx.tar.gz
RUN tar -xzf /tmp/kubectx.tar.gz -C /tmp && mv /tmp/kubectx /usr/local/bin/

RUN pip install --upgrade pip

#
# Python utilities to install in the base image, anything here should be
# anything that is "genrally useful" for software development and not "project
# specific" -- so something like the Cassandra driver or Python SDK for GCP
# should be in the project's own requirements.txt file
#
# coverage -- code coverage reports
# isort -- useful for sorting imports
# lz4 -- is compression lbirary used by Cassandra driver
# pipreqs -- useful for re-creating requirements.txt from what's actually used in code
# pytz -- useful for timezone stuff
# ruff is a great python linter
RUN pip install --upgrade pip
RUN pip install \
  isort \
  coverage \
  ruff \
  reindent \
  pytz \
  pipreqs \
  semver

# Misc
# python -m reindent --help
# ruamel.yaml -- is a nice for working with YAML because it can preserve sorting
# pre-commit -- see https://stefaniemolin.com/articles/devx/pre-commit/setup-guide/

COPY entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

# Install yq
ENV VERSION=v4.44.6
ENV BINARY=yq_linux_amd64
RUN wget https://github.com/mikefarah/yq/releases/download/$VERSION/$BINARY.tar.gz -O - | tar xz && mv ${BINARY} /usr/local/bin/yq

# Install Helm
RUN curl -s https://baltocdn.com/helm/signing.asc | gpg --dearmor | tee /usr/share/keyrings/helm.gpg > /dev/null
RUN echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/helm.gpg] https://baltocdn.com/helm/stable/debian/ all main" | tee /etc/apt/sources.list.d/helm-stable-debian.list
RUN apt-get update && apt-get install helm
# Additional setup for Helm is in the entrypoint.sh script

# Make git use the Delta pager
RUN wget -q https://github.com/dandavison/delta/releases/download/0.18.2/git-delta_0.18.2_arm64.deb -O /tmp/git-delta.deb
RUN dpkg -i /tmp/git-delta.deb
RUN git config --global core.pager delta

# The wildcard here allows this to work if the file does not exist
COPY aliases.* /tmp
RUN if [ -f /tmp/aliases.zsh ]; then cat /tmp/aliases.zsh >> /root/.zshrc; fi

# Optional stuff

# Intall tilt
# TODO tilt is not done, it may not work as it is essentially Docker in Docker
# RUN curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh | bash
# curl -fsSL https://raw.githubusercontent.com/tilt-dev/tilt/master/scripts/install.sh -o /tmp/install-tilt.sh

# Install Go, see go.dev for the latest version
# RUN wget -q https://go.dev/dl/go1.23.2.linux-arm64.tar.gz -O /tmp/go.tar.gz
# RUN tar -xzvf /tmp/go.tar.gz -C /usr/local
# RUN echo "# Golang" >> /root/.zshrc
# RUN echo export GOPRIVATE=github.com/dexcom-inc >> /root/.zshrc
# RUN echo export PATH=$HOME/go/bin:/usr/local/go/bin:$PATH >> /root/.zshrc

# Install Rust
# RUN apt-get install -y cmake
# RUN curl https://sh.rustup.rs -sSf | sh -s -- -y
# RUN echo export PATH="/root/.cargo/bin:${PATH}" >> /root/.zshrc

# Install K9s
# RUN curl -sS https://webi.sh/k9s | sh

# Make ZSH the default shell for the current user in the container
# To check that the shell was indeed added: `chsh -l` and you should see it in
# the list
SHELL ["/bin/zsh", "-c"]
